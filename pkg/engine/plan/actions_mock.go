// Code generated by MockGen. DO NOT EDIT.
// Source: ../actions/actions.go
//
// Generated by this command:
//
//	mockgen -source ../actions/actions.go -destination actions_mock.go -package plan
//

// Package plan is a generated GoMock package.
package plan

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockActionExecutable is a mock of ActionExecutable interface.
type MockActionExecutable struct {
	ctrl     *gomock.Controller
	recorder *MockActionExecutableMockRecorder
}

// MockActionExecutableMockRecorder is the mock recorder for MockActionExecutable.
type MockActionExecutableMockRecorder struct {
	mock *MockActionExecutable
}

// NewMockActionExecutable creates a new mock instance.
func NewMockActionExecutable(ctrl *gomock.Controller) *MockActionExecutable {
	mock := &MockActionExecutable{ctrl: ctrl}
	mock.recorder = &MockActionExecutableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionExecutable) EXPECT() *MockActionExecutableMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockActionExecutable) Config() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(string)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockActionExecutableMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockActionExecutable)(nil).Config))
}

// Execute mocks base method.
func (m *MockActionExecutable) Execute(ctx context.Context, modifiedConfig string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, modifiedConfig)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockActionExecutableMockRecorder) Execute(ctx, modifiedConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockActionExecutable)(nil).Execute), ctx, modifiedConfig)
}

// Type mocks base method.
func (m *MockActionExecutable) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockActionExecutableMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockActionExecutable)(nil).Type))
}
