// Code generated by MockGen. DO NOT EDIT.
// Source: planner.go
//
// Generated by this command:
//
//	mockgen -source planner.go -destination planner_mocks.go -package plan .
//

// Package plan is a generated GoMock package.
package plan

import (
	json "encoding/json"
	reflect "reflect"

	actions "github.com/Servflow/servflow/pkg/engine/actions"
	gomock "go.uber.org/mock/gomock"
)

// MockActionProvider is a mock of ActionProvider interface.
type MockActionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockActionProviderMockRecorder
}

// MockActionProviderMockRecorder is the mock recorder for MockActionProvider.
type MockActionProviderMockRecorder struct {
	mock *MockActionProvider
}

// NewMockActionProvider creates a new mock instance.
func NewMockActionProvider(ctrl *gomock.Controller) *MockActionProvider {
	mock := &MockActionProvider{ctrl: ctrl}
	mock.recorder = &MockActionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionProvider) EXPECT() *MockActionProviderMockRecorder {
	return m.recorder
}

// GetActionExecutable mocks base method.
func (m *MockActionProvider) GetActionExecutable(actionType string, config json.RawMessage) (actions.ActionExecutable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionExecutable", actionType, config)
	ret0, _ := ret[0].(actions.ActionExecutable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionExecutable indicates an expected call of GetActionExecutable.
func (mr *MockActionProviderMockRecorder) GetActionExecutable(actionType, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionExecutable", reflect.TypeOf((*MockActionProvider)(nil).GetActionExecutable), actionType, config)
}
