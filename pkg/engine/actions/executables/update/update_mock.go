// Code generated by MockGen. DO NOT EDIT.
// Source: update.go
//
// Generated by this command:
//
//	mockgen -source update.go -destination update_mock.go -package update
//

// Package update is a generated GoMock package.
package update

import (
	context "context"
	reflect "reflect"

	"github.com/Servflow/servflow/pkg/engine/integration/integrations/filters"
	gomock "go.uber.org/mock/gomock"
)

// MockupdateIntegration is a mock of updateIntegration interface.
type MockupdateIntegration struct {
	ctrl     *gomock.Controller
	recorder *MockupdateIntegrationMockRecorder
}

// MockupdateIntegrationMockRecorder is the mock recorder for MockupdateIntegration.
type MockupdateIntegrationMockRecorder struct {
	mock *MockupdateIntegration
}

// NewMockupdateIntegration creates a new mock instance.
func NewMockupdateIntegration(ctrl *gomock.Controller) *MockupdateIntegration {
	mock := &MockupdateIntegration{ctrl: ctrl}
	mock.recorder = &MockupdateIntegrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockupdateIntegration) EXPECT() *MockupdateIntegrationMockRecorder {
	return m.recorder
}

// Type mocks base method.
func (m *MockupdateIntegration) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockupdateIntegrationMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockupdateIntegration)(nil).Type))
}

// Update mocks base method.
func (m *MockupdateIntegration) Update(ctx context.Context, data map[string]any, options map[string]string, filter ...filters.Filter) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, data, options}
	for _, a := range filter {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockupdateIntegrationMockRecorder) Update(ctx, data, options any, filter ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, data, options}, filter...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockupdateIntegration)(nil).Update), varargs...)
}
