// Code generated by MockGen. DO NOT EDIT.
// Source: authenticate.go
//
// Generated by this command:
//
//	mockgen -source authenticate.go -destination authenticate_mock.go -package authenticate
//

// Package authenticate is a generated GoMock package.
package authenticate

import (
	context "context"
	reflect "reflect"

	"github.com/Servflow/servflow/pkg/engine/integration/integrations/filters"
	gomock "go.uber.org/mock/gomock"
)

// MockfetchImplementation is a mock of fetchImplementation interface.
type MockfetchImplementation struct {
	ctrl     *gomock.Controller
	recorder *MockfetchImplementationMockRecorder
}

// MockfetchImplementationMockRecorder is the mock recorder for MockfetchImplementation.
type MockfetchImplementationMockRecorder struct {
	mock *MockfetchImplementation
}

// NewMockfetchImplementation creates a new mock instance.
func NewMockfetchImplementation(ctrl *gomock.Controller) *MockfetchImplementation {
	mock := &MockfetchImplementation{ctrl: ctrl}
	mock.recorder = &MockfetchImplementationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfetchImplementation) EXPECT() *MockfetchImplementationMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockfetchImplementation) Fetch(ctx context.Context, options map[string]string, filters ...filters.Filter) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, options}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockfetchImplementationMockRecorder) Fetch(ctx, options any, filters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, options}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockfetchImplementation)(nil).Fetch), varargs...)
}

// Type mocks base method.
func (m *MockfetchImplementation) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockfetchImplementationMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockfetchImplementation)(nil).Type))
}
