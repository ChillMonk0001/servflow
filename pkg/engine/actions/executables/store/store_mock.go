// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -source store.go -destination store_mock.go -package store
//

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockstorageIntegrations is a mock of storageIntegrations interface.
type MockstorageIntegrations struct {
	ctrl     *gomock.Controller
	recorder *MockstorageIntegrationsMockRecorder
}

// MockstorageIntegrationsMockRecorder is the mock recorder for MockstorageIntegrations.
type MockstorageIntegrationsMockRecorder struct {
	mock *MockstorageIntegrations
}

// NewMockstorageIntegrations creates a new mock instance.
func NewMockstorageIntegrations(ctrl *gomock.Controller) *MockstorageIntegrations {
	mock := &MockstorageIntegrations{ctrl: ctrl}
	mock.recorder = &MockstorageIntegrationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorageIntegrations) EXPECT() *MockstorageIntegrationsMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockstorageIntegrations) Store(ctx context.Context, data map[string]any, options map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, data, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockstorageIntegrationsMockRecorder) Store(ctx, data, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockstorageIntegrations)(nil).Store), ctx, data, options)
}

// Type mocks base method.
func (m *MockstorageIntegrations) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockstorageIntegrationsMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockstorageIntegrations)(nil).Type))
}
